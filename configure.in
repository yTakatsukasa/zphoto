AC_INIT(zphoto.c)
AM_INIT_AUTOMAKE(zphoto, 1.2)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_ISC_POSIX
AC_HEADER_STDC
AC_PROG_RANLIB

dnl *
dnl * GCC
dnl *

if test -n "$GCC"; then
    CFLAGS="$CFLAGS -Wall -Wunused -Wuninitialized -Wmissing-prototypes -Wmissing-declarations -pedantic"
    CXXFLAGS="-O2 -Wall -Wunused -Wuninitialized"
fi

AC_REPLACE_FUNCS(vasprintf)

ZPHOTO_URL="http://namazu.org/~satoru/zphoto/"
AC_SUBST(ZPHOTO_URL)
AC_DEFINE_UNQUOTED(ZPHOTO_URL, "$ZPHOTO_URL", [Zphoto URL])

HAVE_LIBMING=no
AC_CHECK_HEADER(ming.h,
	        ming_header_found=yes,
		ming_header_found=no)
if test "${ming_header_found}" = yes ; then
	AC_CHECK_LIB(ming, Ming_init, HAVE_LIBMING=yes,,-lm)
	if test "$HAVE_LIBMING" = "yes" ; then
		LIBMING_LIBS="-lming -lm"
		AC_SUBST(LIBMING_LIBS)
	else
 		AC_MSG_ERROR([libming not found])
	fi
else
	AC_MSG_ERROR([ming.h not found])
fi

AC_MSG_CHECKING([whether ming 0.2a (old API) is used])
cat > tmp.c <<'EOF'
#include <ming.h>
int main () {
    SWFMovie movie;
    SWFMovie_save(movie, "foo"); /* 0.2a API */
}
EOF
if $CC -c tmp.c > /dev/null 2>&1; then
    AC_DEFINE_UNQUOTED(MING_0_2a, 1, [Define if using Ming 0.2a (API).])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
rm -f tmp.c

HAVE_LIBPOPT=no
AC_CHECK_HEADER(popt.h,
	        popt_header_found=yes,
		popt_header_found=no)
if test "${popt_header_found}" = yes ; then
	AC_CHECK_LIB(popt, poptGetContext, HAVE_LIBPOPT=yes,,)
	if test "$HAVE_LIBPOPT" = "yes" ; then
		LIBPOPT_LIBS="-lpopt"
		AC_SUBST(LIBPOPT_LIBS)
	else
 		AC_MSG_ERROR([libpopt not found])
	fi
else
 		AC_MSG_ERROR([popt.h not found])
fi

AC_ARG_ENABLE(
    zip,     [  --disable-zip           do not use zip command],
    enable_zip=no, enable_zip=yes)
AC_ARG_ENABLE(
    imlib2,  [  --disable-imlib2        do not use Imlib2],
    enable_imlib2=no, enable_imlib2=yes)
AC_ARG_ENABLE(
    magick,  [  --disable-magick        do not use ImageMagick],
    enable_magick=no, enable_magick=yes)
AC_ARG_ENABLE(
    avifile, [  --disable-avifile       do not use Avifile],
    enable_avifile=no, enable_avifile=yes)
AC_ARG_ENABLE(
    wx,      [  --disable-wx            do not use wxWidgets for GUI],
    enable_wx=no, enable_wx=yes)

dnl * 
dnl *  Disable zip support for Windows system.
dnl * 
if test "$OSTYPE" = "msys"; then
    enable_zip=no
fi

if test "$enable_zip" = "yes"; then
    AC_PATH_PROGS(ZIP, zip, no)
    if test "$ZIP" != "no"; then
            AC_DEFINE_UNQUOTED(HAVE_ZIP, 1, [Define if using zip command.])
    fi
fi

IMLIB2CONFIG=no
MAGICKCONFIG=no

if test "$enable_imlib2" = "yes"; then
    AC_PATH_PROGS(IMLIB2CONFIG, imlib2-config, no)
    if test "$IMLIB2CONFIG" != "no"; then
            LIBIMLIB2_CFLAGS=`$IMLIB2CONFIG --cflags`
            LIBIMLIB2_LIBS=`$IMLIB2CONFIG --libs`
            AC_SUBST(LIBIMLIB2_CFLAGS)
            AC_SUBST(LIBIMLIB2_LIBS)
            AC_DEFINE_UNQUOTED(HAVE_IMLIB2, 1, [Define if using Imlib2.])
    fi
fi

if test "$enable_magick" = "yes" -a "$IMLIB2CONFIG"  = "no"; then
    AC_PATH_PROGS(MAGICKCONFIG, Magick-config, no)
    if test "$MAGICKCONFIG" != "no"; then
            LIBMAGICK_CFLAGS=`$MAGICKCONFIG --cppflags`
            LIBMAGICK_LIBS=`$MAGICKCONFIG --libs`
            LIBMAGICK_LDFLAGS=`$MAGICKCONFIG --ldflags`
            AC_SUBST(LIBMAGICK_CFLAGS)
            AC_SUBST(LIBMAGICK_LIBS)
            AC_SUBST(LIBMAGICK_LDFLAGS)
            AC_DEFINE_UNQUOTED(HAVE_MAGICK, 1, [Define if using ImageMagick.])
    fi
fi

if test "$IMLIB2CONFIG" = "no" -a "$MAGICKCONFIG" = "no"; then
   AC_MSG_ERROR([either imlib2 or ImageMagick is required.])
fi

if test "$enable_avifile" = "yes"; then
    AVIFILE_MIN_VERSION=0.7.34
    AM_PATH_AVIFILE($AVIFILE_MIN_VERSION)

    if test "$HAVE_AVIFILE" = "yes"; then
       AC_DEFINE_UNQUOTED(HAVE_AVIFILE, 1, [Define if using avifile.])
    fi
    AC_SUBST(AVIFILE_CXXFLAGS)
    AC_SUBST(AVIFILE_LDFLAGS)
fi

if test "$enable_wx" = "yes"; then
    AC_ARG_WITH(wx-config,
      [  --with-wx-config=WXCONFIG     use WXCONFIG [WXCONFIG=wx-config, ...]],
      [case "${withval}" in
         *)	WXCONFIG=${withval} ;;
       esac], WXCONFIG=)
    if test "$WXCONFIG" = ""; then
        AC_PATH_PROGS(WXCONFIG, wx-config wxgtk2-config wxgtk-config \
                                wxgtk2-2.5-config wxgtk-2.5-config \
                                wxgtk2-2.4-config wxgtk-2.4-config, no)
    else
        AC_MSG_CHECKING(for wx-config)
        AC_MSG_RESULT($WXCONFIG)
    fi
    if test "$WXCONFIG" != "no"; then
        LIBWX_CXXFLAGS=`$WXCONFIG --cflags`
        LIBWX_LIBS=`$WXCONFIG --libs`
        WXZPHOTO='wxzphoto$(EXEEXT)'
        AC_SUBST(WXZPHOTO)
        AC_SUBST(LIBWX_CXXFLAGS)
        AC_SUBST(LIBWX_LIBS)
        AC_DEFINE_UNQUOTED(HAVE_WX, 1, [Define if using wxWidgets.])
    fi
fi

dnl * 
dnl *  Gettext stuff
dnl * 
ALL_LINGUAS="ja ja_JP.SJIS"
AM_GNU_GETTEXT([external])
AM_LC_MESSAGES


dnl * 
dnl *  Resource for Windows 
dnl * 
RESOURCE_OBJECT=""
if test "$OSTYPE" = "msys"; then
    RESOURCE_OBJECT="resource.o"
fi
AC_SUBST(RESOURCE_OBJECT)

AM_CONFIG_HEADER(config.h)
AC_OUTPUT([	Makefile
                po/Makefile.in
                m4/Makefile 
		doc/Makefile
                doc/images/Makefile
		icon/Makefile
		support/Makefile
		templates/Makefile
		templates/default/Makefile
		templates/default/en/Makefile
		templates/default/ja/Makefile
		templates/default/all/Makefile]
)
